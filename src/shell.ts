import {mat4, vec2, vec3, vec4,common} from "./gl-matrix-es6.js"

import {gl, programs, useProgram} from "./tanks.js"

import {TankMap} from "./map.js"

const gravity = -1.0;

function v(a:number, b:number, c:number) {
    return vec3.fromValues(a, b, c);
}










function addNormals(points:Array<vec3>):Float32Array
{
    let toReturn = new Float32Array(points.length*6)

    let index = 0;
    points.forEach(e=>{
        toReturn[index++] = e[0]
        toReturn[index++] = e[1]
        toReturn[index++] = e[2]
        toReturn[index++] = e[0]
        toReturn[index++] = e[1]
        toReturn[index++] = e[2]
    })
    return toReturn;
}


const isoSpherePoints = [
v(0.0,0.42532540417601994,0.2628655560595668,),v(0.0,0.5,0.0,),v(-0.25,0.4045084971874737,0.1545084971874737,),
v(0.0,0.42532540417601994,-0.2628655560595668,),v(-0.25,0.4045084971874737,-0.1545084971874737,),v(0.0,0.5,0.0,),
v(-0.42532540417601994,0.2628655560595668,0.0,),v(-0.25,0.4045084971874737,0.1545084971874737,),v(-0.25,0.4045084971874737,-0.1545084971874737,),
v(0.0,0.5,0.0,),v(-0.25,0.4045084971874737,-0.1545084971874737,),v(-0.25,0.4045084971874737,0.1545084971874737,),
v(0.0,0.42532540417601994,-0.2628655560595668,),v(0.0,0.5,0.0,),v(0.25,0.4045084971874737,-0.1545084971874737,),
v(0.0,0.42532540417601994,0.2628655560595668,),v(0.25,0.4045084971874737,0.1545084971874737,),v(0.0,0.5,0.0,),
v(0.42532540417601994,0.2628655560595668,0.0,),v(0.25,0.4045084971874737,-0.1545084971874737,),v(0.25,0.4045084971874737,0.1545084971874737,),
v(0.0,0.5,0.0,),v(0.25,0.4045084971874737,0.1545084971874737,),v(0.25,0.4045084971874737,-0.1545084971874737,),
v(0.0,-0.42532540417601994,0.2628655560595668,),v(0.0,-0.5,0.0,),v(0.25,-0.4045084971874737,0.1545084971874737,),
v(0.0,-0.42532540417601994,-0.2628655560595668,),v(0.25,-0.4045084971874737,-0.1545084971874737,),v(0.0,-0.5,0.0,),
v(0.42532540417601994,-0.2628655560595668,0.0,),v(0.25,-0.4045084971874737,0.1545084971874737,),v(0.25,-0.4045084971874737,-0.1545084971874737,),
v(0.0,-0.5,0.0,),v(0.25,-0.4045084971874737,-0.1545084971874737,),v(0.25,-0.4045084971874737,0.1545084971874737,),
v(0.0,-0.42532540417601994,-0.2628655560595668,),v(0.0,-0.5,0.0,),v(-0.25,-0.4045084971874737,-0.1545084971874737,),
v(0.0,-0.42532540417601994,0.2628655560595668,),v(-0.25,-0.4045084971874737,0.1545084971874737,),v(0.0,-0.5,0.0,),
v(-0.42532540417601994,-0.2628655560595668,0.0,),v(-0.25,-0.4045084971874737,-0.1545084971874737,),v(-0.25,-0.4045084971874737,0.1545084971874737,),
v(0.0,-0.5,0.0,),v(-0.25,-0.4045084971874737,0.1545084971874737,),v(-0.25,-0.4045084971874737,-0.1545084971874737,),
v(0.2628655560595668,0.0,0.42532540417601994,),v(0.0,0.0,0.5,),v(0.1545084971874737,-0.25,0.4045084971874737,),
v(-0.2628655560595668,0.0,0.42532540417601994,),v(-0.1545084971874737,-0.25,0.4045084971874737,),v(0.0,0.0,0.5,),
v(0.0,-0.42532540417601994,0.2628655560595668,),v(0.1545084971874737,-0.25,0.4045084971874737,),v(-0.1545084971874737,-0.25,0.4045084971874737,),
v(0.0,0.0,0.5,),v(-0.1545084971874737,-0.25,0.4045084971874737,),v(0.1545084971874737,-0.25,0.4045084971874737,),
v(-0.2628655560595668,0.0,0.42532540417601994,),v(0.0,0.0,0.5,),v(-0.1545084971874737,0.25,0.4045084971874737,),
v(0.2628655560595668,0.0,0.42532540417601994,),v(0.1545084971874737,0.25,0.4045084971874737,),v(0.0,0.0,0.5,),
v(0.0,0.42532540417601994,0.2628655560595668,),v(-0.1545084971874737,0.25,0.4045084971874737,),v(0.1545084971874737,0.25,0.4045084971874737,),
v(0.0,0.0,0.5,),v(0.1545084971874737,0.25,0.4045084971874737,),v(-0.1545084971874737,0.25,0.4045084971874737,),
v(0.2628655560595668,0.0,-0.42532540417601994,),v(0.0,0.0,-0.5,),v(0.1545084971874737,0.25,-0.4045084971874737,),
v(-0.2628655560595668,0.0,-0.42532540417601994,),v(-0.1545084971874737,0.25,-0.4045084971874737,),v(0.0,0.0,-0.5,),
v(0.0,0.42532540417601994,-0.2628655560595668,),v(0.1545084971874737,0.25,-0.4045084971874737,),v(-0.1545084971874737,0.25,-0.4045084971874737,),
v(0.0,0.0,-0.5,),v(-0.1545084971874737,0.25,-0.4045084971874737,),v(0.1545084971874737,0.25,-0.4045084971874737,),
v(-0.2628655560595668,0.0,-0.42532540417601994,),v(0.0,0.0,-0.5,),v(-0.1545084971874737,-0.25,-0.4045084971874737,),
v(0.2628655560595668,0.0,-0.42532540417601994,),v(0.1545084971874737,-0.25,-0.4045084971874737,),v(0.0,0.0,-0.5,),
v(0.0,-0.42532540417601994,-0.2628655560595668,),v(-0.1545084971874737,-0.25,-0.4045084971874737,),v(0.1545084971874737,-0.25,-0.4045084971874737,),
v(0.0,0.0,-0.5,),v(0.1545084971874737,-0.25,-0.4045084971874737,),v(-0.1545084971874737,-0.25,-0.4045084971874737,),
v(0.42532540417601994,0.2628655560595668,0.0,),v(0.5,0.0,0.0,),v(0.4045084971874737,0.1545084971874737,-0.25,),
v(0.42532540417601994,-0.2628655560595668,0.0,),v(0.4045084971874737,-0.1545084971874737,-0.25,),v(0.5,0.0,0.0,),
v(0.2628655560595668,0.0,-0.42532540417601994,),v(0.4045084971874737,0.1545084971874737,-0.25,),v(0.4045084971874737,-0.1545084971874737,-0.25,),
v(0.5,0.0,0.0,),v(0.4045084971874737,-0.1545084971874737,-0.25,),v(0.4045084971874737,0.1545084971874737,-0.25,),
v(0.42532540417601994,-0.2628655560595668,0.0,),v(0.5,0.0,0.0,),v(0.4045084971874737,-0.1545084971874737,0.25,),
v(0.42532540417601994,0.2628655560595668,0.0,),v(0.4045084971874737,0.1545084971874737,0.25,),v(0.5,0.0,0.0,),
v(0.2628655560595668,0.0,0.42532540417601994,),v(0.4045084971874737,-0.1545084971874737,0.25,),v(0.4045084971874737,0.1545084971874737,0.25,),
v(0.5,0.0,0.0,),v(0.4045084971874737,0.1545084971874737,0.25,),v(0.4045084971874737,-0.1545084971874737,0.25,),
v(-0.42532540417601994,0.2628655560595668,0.0,),v(-0.5,0.0,0.0,),v(-0.4045084971874737,0.1545084971874737,0.25,),
v(-0.42532540417601994,-0.2628655560595668,0.0,),v(-0.4045084971874737,-0.1545084971874737,0.25,),v(-0.5,0.0,0.0,),
v(-0.2628655560595668,0.0,0.42532540417601994,),v(-0.4045084971874737,0.1545084971874737,0.25,),v(-0.4045084971874737,-0.1545084971874737,0.25,),
v(-0.5,0.0,0.0,),v(-0.4045084971874737,-0.1545084971874737,0.25,),v(-0.4045084971874737,0.1545084971874737,0.25,),
v(-0.42532540417601994,-0.2628655560595668,0.0,),v(-0.5,0.0,0.0,),v(-0.4045084971874737,-0.1545084971874737,-0.25,),
v(-0.42532540417601994,0.2628655560595668,0.0,),v(-0.4045084971874737,0.1545084971874737,-0.25,),v(-0.5,0.0,0.0,),
v(-0.2628655560595668,0.0,-0.42532540417601994,),v(-0.4045084971874737,-0.1545084971874737,-0.25,),v(-0.4045084971874737,0.1545084971874737,-0.25,),
v(-0.5,0.0,0.0,),v(-0.4045084971874737,0.1545084971874737,-0.25,),v(-0.4045084971874737,-0.1545084971874737,-0.25,),
v(0.0,0.42532540417601994,0.2628655560595668,),v(0.1545084971874737,0.25,0.4045084971874737,),v(0.25,0.4045084971874737,0.1545084971874737,),
v(0.2628655560595668,0.0,0.42532540417601994,),v(0.4045084971874737,0.1545084971874737,0.25,),v(0.1545084971874737,0.25,0.4045084971874737,),
v(0.42532540417601994,0.2628655560595668,0.0,),v(0.25,0.4045084971874737,0.1545084971874737,),v(0.4045084971874737,0.1545084971874737,0.25,),
v(0.1545084971874737,0.25,0.4045084971874737,),v(0.4045084971874737,0.1545084971874737,0.25,),v(0.25,0.4045084971874737,0.1545084971874737,),
v(0.0,0.42532540417601994,-0.2628655560595668,),v(0.25,0.4045084971874737,-0.1545084971874737,),v(0.1545084971874737,0.25,-0.4045084971874737,),
v(0.42532540417601994,0.2628655560595668,0.0,),v(0.4045084971874737,0.1545084971874737,-0.25,),v(0.25,0.4045084971874737,-0.1545084971874737,),
v(0.2628655560595668,0.0,-0.42532540417601994,),v(0.1545084971874737,0.25,-0.4045084971874737,),v(0.4045084971874737,0.1545084971874737,-0.25,),
v(0.25,0.4045084971874737,-0.1545084971874737,),v(0.4045084971874737,0.1545084971874737,-0.25,),v(0.1545084971874737,0.25,-0.4045084971874737,),
v(0.0,0.42532540417601994,-0.2628655560595668,),v(-0.1545084971874737,0.25,-0.4045084971874737,),v(-0.25,0.4045084971874737,-0.1545084971874737,),
v(-0.2628655560595668,0.0,-0.42532540417601994,),v(-0.4045084971874737,0.1545084971874737,-0.25,),v(-0.1545084971874737,0.25,-0.4045084971874737,),
v(-0.42532540417601994,0.2628655560595668,0.0,),v(-0.25,0.4045084971874737,-0.1545084971874737,),v(-0.4045084971874737,0.1545084971874737,-0.25,),
v(-0.1545084971874737,0.25,-0.4045084971874737,),v(-0.4045084971874737,0.1545084971874737,-0.25,),v(-0.25,0.4045084971874737,-0.1545084971874737,),
v(0.0,0.42532540417601994,0.2628655560595668,),v(-0.25,0.4045084971874737,0.1545084971874737,),v(-0.1545084971874737,0.25,0.4045084971874737,),
v(-0.42532540417601994,0.2628655560595668,0.0,),v(-0.4045084971874737,0.1545084971874737,0.25,),v(-0.25,0.4045084971874737,0.1545084971874737,),
v(-0.2628655560595668,0.0,0.42532540417601994,),v(-0.1545084971874737,0.25,0.4045084971874737,),v(-0.4045084971874737,0.1545084971874737,0.25,),
v(-0.25,0.4045084971874737,0.1545084971874737,),v(-0.4045084971874737,0.1545084971874737,0.25,),v(-0.1545084971874737,0.25,0.4045084971874737,),
v(0.0,-0.42532540417601994,0.2628655560595668,),v(0.25,-0.4045084971874737,0.1545084971874737,),v(0.1545084971874737,-0.25,0.4045084971874737,),
v(0.42532540417601994,-0.2628655560595668,0.0,),v(0.4045084971874737,-0.1545084971874737,0.25,),v(0.25,-0.4045084971874737,0.1545084971874737,),
v(0.2628655560595668,0.0,0.42532540417601994,),v(0.1545084971874737,-0.25,0.4045084971874737,),v(0.4045084971874737,-0.1545084971874737,0.25,),
v(0.25,-0.4045084971874737,0.1545084971874737,),v(0.4045084971874737,-0.1545084971874737,0.25,),v(0.1545084971874737,-0.25,0.4045084971874737,),
v(0.0,-0.42532540417601994,0.2628655560595668,),v(-0.1545084971874737,-0.25,0.4045084971874737,),v(-0.25,-0.4045084971874737,0.1545084971874737,),
v(-0.2628655560595668,0.0,0.42532540417601994,),v(-0.4045084971874737,-0.1545084971874737,0.25,),v(-0.1545084971874737,-0.25,0.4045084971874737,),
v(-0.42532540417601994,-0.2628655560595668,0.0,),v(-0.25,-0.4045084971874737,0.1545084971874737,),v(-0.4045084971874737,-0.1545084971874737,0.25,),
v(-0.1545084971874737,-0.25,0.4045084971874737,),v(-0.4045084971874737,-0.1545084971874737,0.25,),v(-0.25,-0.4045084971874737,0.1545084971874737,),
v(0.0,-0.42532540417601994,-0.2628655560595668,),v(0.1545084971874737,-0.25,-0.4045084971874737,),v(0.25,-0.4045084971874737,-0.1545084971874737,),
v(0.2628655560595668,0.0,-0.42532540417601994,),v(0.4045084971874737,-0.1545084971874737,-0.25,),v(0.1545084971874737,-0.25,-0.4045084971874737,),
v(0.42532540417601994,-0.2628655560595668,0.0,),v(0.25,-0.4045084971874737,-0.1545084971874737,),v(0.4045084971874737,-0.1545084971874737,-0.25,),
v(0.1545084971874737,-0.25,-0.4045084971874737,),v(0.4045084971874737,-0.1545084971874737,-0.25,),v(0.25,-0.4045084971874737,-0.1545084971874737,),
v(0.0,-0.42532540417601994,-0.2628655560595668,),v(-0.25,-0.4045084971874737,-0.1545084971874737,),v(-0.1545084971874737,-0.25,-0.4045084971874737,),
v(-0.42532540417601994,-0.2628655560595668,0.0,),v(-0.4045084971874737,-0.1545084971874737,-0.25,),v(-0.25,-0.4045084971874737,-0.1545084971874737,),
v(-0.2628655560595668,0.0,-0.42532540417601994,),v(-0.1545084971874737,-0.25,-0.4045084971874737,),v(-0.4045084971874737,-0.1545084971874737,-0.25,),
v(-0.25,-0.4045084971874737,-0.1545084971874737,),v(-0.4045084971874737,-0.1545084971874737,-0.25,),v(-0.1545084971874737,-0.25,-0.4045084971874737,),];


const isoSphereVertData = addNormals(isoSpherePoints);

export class Shell
{
    position:vec3;
    velocity:vec3;
    boomRadius:number
    size:number;
    color:vec3;
    vao:WebGLVertexArrayObject|null
    vbo:WebGLBuffer|null
    vao2:WebGLVertexArrayObject|null
    vbo2:WebGLBuffer|null
    transformMatrix:mat4   
    program:WebGLProgram
    theMap:TankMap|null;
    shouldMove:boolean;
    peakDamage:number;

    constructor(program:WebGLProgram, position:vec3, velocity:vec3, boomRadius:number, size:number, damage:number)
    {
        this.peakDamage = damage;
        
        this.shouldMove = true;
        this.color = vec3.fromValues(1, 1, 1);
        this.position = position;
        this.velocity = velocity;
        this.boomRadius = boomRadius;
        this.size = size;
        this.program = program;
        this.vao = gl.createVertexArray();
        this.vbo = gl.createBuffer();
        this.vao2 = gl.createVertexArray();
        this.vbo2 = gl.createBuffer();

        this.transformMatrix = mat4.create();

        this.theMap = null;

        gl.bindVertexArray(this.vao);
        gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, 0, 0, 0, 0, 1]), gl.STATIC_DRAW);
        gl.enableVertexAttribArray(gl.getAttribLocation(program, "aPos"));
        gl.vertexAttribPointer(gl.getAttribLocation(program, "aPos"), 3, gl.FLOAT, false, 24, 0);
        gl.enableVertexAttribArray(gl.getAttribLocation(program, "aNormal"));
        gl.vertexAttribPointer(gl.getAttribLocation(program, "aNormal"), 3, gl.FLOAT, false, 24, 12);
       
        gl.bindVertexArray(null);
        gl.bindBuffer(gl.ARRAY_BUFFER, null); 
    }

    tick(dT:number)
    {
        
        console.log("shell tick", this.shouldMove);
        let seconds = dT /1000;
        if(this.shouldMove)
        {
            vec3.add(this.position, this.position, vec3.scale(vec3.create(), this.velocity, seconds));
            vec3.add(this.velocity, this.velocity, vec3.fromValues(0, 0, gravity*seconds))
        }
        else
        {
            this.boomRadius -=seconds*3
            if (this.boomRadius<=0)
            {
                if(this.theMap != null)
                {
                    this.theMap.removeShell(this);
                }
            }
            //TODO: shrink by a certain amount? maybe 1 per second
        }
        console.log(this.position)
    }

    getDamage(distance:number)
    {
        return this.peakDamage*(1-(distance/this.boomRadius));
    }
    draw()
    {

        useProgram(this.program)
        gl.bindVertexArray(this.vao);
        gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);

        gl.uniform1f(gl.getUniformLocation(this.program, "pointSize"), this.size);


        if(this.shouldMove)
        {
            //console.log("should move")
            mat4.translate(this.transformMatrix, mat4.create(), this.position);
            let normalMat = mat4.transpose(mat4.create(), mat4.invert(mat4.create(), this.transformMatrix))
            gl.uniformMatrix4fv(gl.getUniformLocation(this.program, "normalMat"), false, normalMat as Float32List);
            gl.uniform3fv(gl.getUniformLocation(this.program, "color"), new Float32Array(this.color));
            gl.uniformMatrix4fv(gl.getUniformLocation(this.program, "model"), false, new Float32Array(this.transformMatrix))
            gl.drawArrays(gl.POINTS, 0, 1)
        }
        else
        {
            
            //console.log("should'nt move")

            //TODO: scale based on scale
            
            mat4.translate(this.transformMatrix, mat4.create(), this.position);
            mat4.scale(this.transformMatrix, this.transformMatrix, vec3.fromValues(this.boomRadius*2, this.boomRadius*2, this.boomRadius*2));
            let normalMat = mat4.transpose(mat4.create(), mat4.invert(mat4.create(), this.transformMatrix))
            gl.uniformMatrix4fv(gl.getUniformLocation(this.program, "normalMat"), false, normalMat as Float32List);
            gl.uniform3fv(gl.getUniformLocation(this.program, "color"), new Float32Array([1, 1, 1]));

            gl.uniformMatrix4fv(gl.getUniformLocation(this.program, "model"), false, new Float32Array(this.transformMatrix))
            
            gl.drawArrays(gl.TRIANGLES, 0, isoSphereVertData.length/6)
            
            gl.uniform1f(gl.getUniformLocation(this.program, "pointSize"), 5.0);
        }
        gl.bindVertexArray(null);
        gl.bindBuffer(gl.ARRAY_BUFFER, null); 
        

    }
    colide(finalDestination:vec3, map:TankMap)
    {
        // console.log("shell colide")
        // console.log("final dest: ", finalDestination);
        this.theMap = map;
        this.position = finalDestination;
        
        // this.vao = gl.createVertexArray();
        // this.vbo = gl.createBuffer();
        gl.bindVertexArray(this.vao);
        gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);
        gl.bufferData(gl.ARRAY_BUFFER, isoSphereVertData, gl.STATIC_DRAW);
        gl.bindVertexArray(null);
        gl.bindBuffer(gl.ARRAY_BUFFER, null); 
        //TODO:
        /*

        buffer new vertices
        

        */
        this.shouldMove = false;
        
    }

}